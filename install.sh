#!/bin/bash

# Sprint Timer Installation Script - High Precision Version
echo "Installing Sprint Timer with GPS and Wired Timing Support..."

# Update package list
sudo apt-get update

# Install system dependencies
sudo apt-get install -y python3-pip python3-dev python3-venv gpsd gpsd-clients chrony

# Create virtual environment (optional but recommended)
python3 -m venv venv
source venv/bin/activate

# Install Python dependencies
pip install -r requirements.txt

# Enable SPI interface
echo "Enabling SPI interface..."
sudo raspi-config nonint do_spi 0

# Enable UART interface
echo "Enabling UART interface..."
sudo raspi-config nonint do_serial 0

# Add user to gpio group (if not already added)
sudo usermod -a -G gpio $USER

# Configure GPS system
echo "Configuring GPS system..."

# Create GPS configuration
sudo tee /etc/default/gpsd > /dev/null <<EOF
# Default settings for gpsd.
# Please do not edit this file directly - use dpkg-reconfigure instead

START_DAEMON="true"
GPSD_OPTIONS="-n"
DEVICES="/dev/ttyAMA0"
USBAUTO="true"
GPSD_SOCKET="/var/run/gpsd.sock"
EOF

# Configure chrony for GPS timing
sudo tee /etc/chrony/chrony.conf > /dev/null <<EOF
# GPS timing configuration
# Reference clock from gpsd shared memory
refclock SHM 0 refid GPS precision 1e-1 offset 0.5 delay 0.2

# Reference clock from kernel PPS device
refclock PPS /dev/pps0 refid PPS lock GPS precision 1e-7

# Allow NTP client access from local network
allow 192.168.4.0/24

# Record the rate at which the system clock gains/losses time
driftfile /var/lib/chrony/drift

# Enable kernel synchronization of the real-time clock (RTC)
rtcsync

# Enable hardware timestamping on all interfaces that support it
hwtimestamp *

# Increase the minimum number of selectable sources required to adjust
# the system clock
minsources 2

# Record the rate at which the system clock gains/losses time
makestep 1.0 3
EOF

# Configure /boot/config.txt for GPS
echo "Configuring /boot/config.txt for GPS support..."
sudo tee -a /boot/config.txt > /dev/null <<EOF

# GPS Configuration
enable_uart=1
dtoverlay=pps-gpio,gpiopin=18
EOF

# Restart services
echo "Restarting GPS and timing services..."
sudo systemctl enable gpsd
sudo systemctl restart gpsd
sudo systemctl enable chrony
sudo systemctl restart chrony

echo "Installation complete!"
echo ""
echo "Next steps:"
echo "1. Reboot your Raspberry Pi: sudo reboot"
echo "2. Configure network settings in common/config.py"
echo "3. Connect GPS module to UART pins (TX: GPIO14, RX: GPIO15, PPS: GPIO18)"
echo "4. For wired mode, connect GPIO23 (master) to GPIO24 (slave) with 330Î© resistor"
echo "5. Run the application: python main_app.py"
echo ""
echo "For the secondary Pi, just run: python remote_gate.py"
echo ""
echo "GPS Status Check:"
echo "  - Check GPS lock: gpspipe -w -n 10"
echo "  - Check chrony status: chronyc tracking"
echo "  - Check PPS: cat /sys/class/pps/pps0/assert"
